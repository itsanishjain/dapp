import Head from "next/head";
import Web3Modal from "web3modal";
import { providers, Contract } from "ethers";
import { useState, useEffect, useRef } from "react";
import { WHITELIST_CONTRACT_ADDRESS, whitelistABI } from "../src/constants";
import Loader from "../src/components/Loader";
import Button from "../src/components/Button";

export default function Whitelist() {
  const [walletConnected, setWalletConnected] = useState(false);

  const [joinedWhitelist, setJoinedWhitelist] = useState(false);

  const [loading, setLoading] = useState(false);

  const [numberOfWhitelisted, setNumberOfWhitelisted] = useState(0);

  const [scError, setScError] = useState();

  const web3ModalRef = useRef();

  async function getProviderOrSigner(needSigner = false) {
    console.log("I am running");
    // connect to MM
    const provider = await web3ModalRef.current.connect();
    const web3Provider = new providers.Web3Provider(provider);

    const { chainId } = await web3Provider.getNetwork();

    if (chainId !== 4) {
      window.alert("Change your network to Rinkeby Testnet");
      throw new Error("Change your network to Rinkeby Testnet");
    }
    if (needSigner) {
      const signer = web3Provider.getSigner();
      return signer;
    }

    return web3Provider;
  }

  async function connectWallet() {
    try {
      await getProviderOrSigner();
      setWalletConnected(true);
      getNumberOfWhitelisted();
    } catch (error) {
      console.log("ERROR", error);
    }
  }

  useEffect(() => {
    console.log("USE EFFCET RUNS");
    if (!walletConnected) {
      web3ModalRef.current = new Web3Modal({
        network: "rinkeby",
        providerOptions: {},
        disableInjectedProvider: false,
      });
      connectWallet();
    }
  }, [walletConnected]);

  const getNumberOfWhitelisted = async () => {
    try {
      const provider = await getProviderOrSigner();
      const contract = new Contract(
        WHITELIST_CONTRACT_ADDRESS,
        whitelistABI,
        provider
      );
      const numberOfWhitelisted = await contract.numAddressesWhitelisted();
      setNumberOfWhitelisted(numberOfWhitelisted);
    } catch (error) {
      console.log("ERROR IN FEATCHING NUMBER OF WHITELISTED", error);
    }
  };

  const addAddressToWhitelist = async () => {
    try {
      const signer = await getProviderOrSigner(true);
      const contract = new Contract(
        WHITELIST_CONTRACT_ADDRESS,
        whitelistABI,
        signer
      );

      const tx = await contract.addAddressesToWhitelist();

      setLoading(true);
      await tx.wait();
      setLoading(false);
      getNumberOfWhitelisted();
    } catch (error) {
      setScError(error.error.message);
    }
  };

  function handleConnectWallet() {
    setScError(null);
    addAddressToWhitelist();
  }

  function renderButton() {
    if (walletConnected) {
      if (joinedWhitelist) {
        console.log("Already JOINED");
        return <div className="text-md font-bold">Thanks for joining</div>;
      } else if (loading) {
        return <Loader />;
      } else {
        return <Button onClick={handleConnectWallet} text="Join Whitelist" />;
      }
    }
  }

  return (
    <div className="max-w-md mx-auto text-center mt-8 bg-gradient-to-r from-neutral-500 to bg-slate-800 p-8">
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <h2 className="text-2xl font-medium text-white">Whitelist DAPP</h2>

        {renderButton()}

        <p className="text-lg font-medium text-white">
          Total member joined is {numberOfWhitelisted}
        </p>

        {scError && <p className="text-white text-md mt-4 ">{scError}</p>}
      </main>
    </div>
  );
}
